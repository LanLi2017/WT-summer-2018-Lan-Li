from graphviz import Digraph
dot=Digraph(comment='The OpenRefine Table')
dot.node('A','OpenRefine')
dot.node('1','Facet')
dot.node('2','Text filter')
dot.node('3','Edit cells')
dot.node('4','Edit column')
dot.node('5','Transpose')
dot.node('6','Sort')
dot.node('7','View')
dot.node('8','Reconcile')
dot.edges(['A1','A2','A3','A4','A5','A6','A7','A8'])

dot.node('a','Text facet')
dot.node('b','Numeric facet')
dot.node('c','Timeline facet')
dot.node('d','Scatterplot facet')
dot.node('e','Custom text facet')
dot.node('f','Custom Numeric Facet')
dot.node('g','Customized facets')
dot.edges(['1a','1b','1c','1d','1e','1f','1g'])

dot.node('h','Word facet')
dot.node('i','Duplicate facet')
dot.node('j','Numeric log facet')
dot.node('k','1-bounded numeric log facet')
dot.node('l','Text length facet')
dot.node('m','Log of text length facet')
dot.node('n','Unicode char-code facet')
dot.node('o','Facet by error')
dot.node('p','Facet by blank')
dot.edges(['gh','gi','gj','gk','gl','gm','gn','go','gp'])

dot.node('r','Transform')
dot.node('s','Common transforms')
dot.node('t','Fill down')
dot.node('u','Blank down')
dot.node('v','Split multi-valued cells')
dot.node('w','Join multi-valued cells')
dot.node('x','Cluster and edit')
dot.edges(['3r','3s','3t','3u','3v','3w','3x'])

dot.node('@','Trim leading and trailing whitespace')
dot.node('#','Collapse consecutive whitespace')
dot.node('$','Unescape HTML entities')
dot.node('%','To titlecase')
dot.node('^','To uppercase')
dot.node('&','To lowercase')
dot.node('*','To number')
dot.node('(','To date')
dot.node(')','To text')
dot.node('[','Blank out cells')
dot.edges(['s@','s#','s$','s%','s^','s&','s*','s(','s)','s['])

dot.node('B','Split into several columns')
dot.node('C','Add column based on this column')
dot.node('E','Add column by fetching URLs')
dot.node('F','Add columns from reconciled values')
dot.node('G','Rename this column')
dot.node('H','Remove this column')
dot.node('I','Move column to beginning')
dot.node('J','Move column to end')
dot.node('K','Move column left')
dot.node('L','Move column right')
dot.edges(['4B','4C','4E','4F','4G','4H','4I','4J','4K','4L'])


dot.node('M','Transpose cells across columns into rows')
dot.node('N','Transpose cells in rows into columns')
dot.node('O','Columnize by key/value columns')
dot.edges(['5M','5N','5O'])

dot.node('P','Collapse this column')
dot.node('Q','Collapse all other columns')
dot.node('R','Collapse all columns to left')
dot.node('S','Collapse all columns to right')
dot.edges(['7P','7Q','7R','7S'])

dot.node('T','Start reconciling')
dot.node('U','Facets')
dot.node('V','QA facets')
dot.node('W','Actions')
dot.node('X','Copy reconciliation data')
dot.edges(['8T','8U','8V','8W','8X'])

dot.node('一','By judgment')
dot.node('二','Best candidate score')
dot.node('三','Best candidate type match')
dot.node('四','Best candidate name match')
dot.node('五','Best candidate name edit distance')
dot.node('六','Best candidate name word similarity')
dot.node('七','Best candidate types')
dot.edges(['U一','U二','U三','U四','U五','U六','U七'])

dot.node('Y','QA results')
dot.node('Z','Judgment actions')
dot.node('q','Judgment history entries')
dot.edges(['VY','VZ','Vq'])

dot.node('|','Match each cell to its best candidate')
dot.node(';','Create a new item for each cell')
dot.node('"','Create one new item for similar cells')
dot.node('/','Match all filtered cells to')
dot.node('?','Discard reconciliation judgments')
dot.node('>','Clear reconciliatioin data')
dot.edges(['W|','W;','W"','W/','W?','W>'])

print(dot.source)
dot.render('test-output/OR-table.gv', view=True)
